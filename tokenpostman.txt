{
    "access_token": "eyJhbGciOiJIUzI1NiIsImtpZCI6IkZVNGdqdmswQUVXMlZVeVgiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL290Z3FkbWtja2hpaHhleWN5cmJqLnN1cGFiYXNlLmNvL2F1dGgvdjEiLCJzdWIiOiJkNjAxYTg4YS04YmJkLTRmZjAtOGQyZS1lZGY5NmM0ZjE4OTciLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNzQ3MDU2MjA2LCJpYXQiOjE3NDcwNTI2MDYsImVtYWlsIjoibmllcGVtbWFudWVsbGEyOUBnbWFpbC5jb20iLCJwaG9uZSI6IiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7ImVtYWlsIjoibmllcGVtbWFudWVsbGEyOUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJzdWIiOiJkNjAxYTg4YS04YmJkLTRmZjAtOGQyZS1lZGY5NmM0ZjE4OTcifSwicm9sZSI6ImF1dGhlbnRpY2F0ZWQiLCJhYWwiOiJhYWwxIiwiYW1yIjpbeyJtZXRob2QiOiJwYXNzd29yZCIsInRpbWVzdGFtcCI6MTc0NzA1MjYwNn1dLCJzZXNzaW9uX2lkIjoiNzI3NWI0YzQtY2UzOS00NDVhLThjMGItMWEyMjUzYTg5MGVjIiwiaXNfYW5vbnltb3VzIjpmYWxzZX0.vllcPS2PNmBQp9bfUwysvSd8tvaI8VQWfC8fMyGbawk",
    "token_type": "bearer",
    "expires_in": 3600,
    "expires_at": 1747056206,
    "refresh_token": "mhlafyg27uiu",
    "user": {
        "id": "d601a88a-8bbd-4ff0-8d2e-edf96c4f1897",
        "aud": "authenticated",
        "role": "authenticated",
        "email": "niepemmanuella29@gmail.com",
        "email_confirmed_at": "2025-05-12T04:31:33.899062Z",
        "phone": "",
        "confirmation_sent_at": "2025-05-12T04:28:04.864762Z",
        "confirmed_at": "2025-05-12T04:31:33.899062Z",
        "last_sign_in_at": "2025-05-12T12:23:26.270830474Z",
        "app_metadata": {
            "provider": "email",
            "providers": [
                "email"
            ]
        },
        "user_metadata": {
            "email": "niepemmanuella29@gmail.com",
            "email_verified": true,
            "phone_verified": false,
            "sub": "d601a88a-8bbd-4ff0-8d2e-edf96c4f1897"
        },
        "identities": [
            {
                "identity_id": "c6299aca-c78d-4ebf-90ae-65bea50eacb9",
                "id": "d601a88a-8bbd-4ff0-8d2e-edf96c4f1897",
                "user_id": "d601a88a-8bbd-4ff0-8d2e-edf96c4f1897",
                "identity_data": {
                    "email": "niepemmanuella29@gmail.com",
                    "email_verified": true,
                    "phone_verified": false,
                    "sub": "d601a88a-8bbd-4ff0-8d2e-edf96c4f1897"
                },
                "provider": "email",
                "last_sign_in_at": "2025-05-12T04:28:04.862393Z",
                "created_at": "2025-05-12T04:28:04.862439Z",
                "updated_at": "2025-05-12T04:28:04.862439Z",
                "email": "niepemmanuella29@gmail.com"
            }
        ],
        "created_at": "2025-05-12T04:28:04.86009Z",
        "updated_at": "2025-05-12T12:23:26.277227Z",
        "is_anonymous": false
    }
}




Le **refresh token** permet de renouveler l'**access token** lorsque celui-ci expire, sans que l'utilisateur n'ait besoin de se reconnecter. Voici comment tu peux utiliser le **refresh token** dans Supabase.

### 1. **URL pour rafra√Æchir le token**

L'endpoint pour rafra√Æchir le **access token** avec un **refresh token** est :

```
POST https://<ton-projet>.supabase.co/auth/v1/token
```

### 2. **Headers**

Tu dois inclure l'API key dans les en-t√™tes :

| Cl√©            | Valeur                          |
| -------------- | ------------------------------- |
| `apikey`       | Ta cl√© `anon` ou `service_role` |
| `Content-Type` | `application/json`              |

### 3. **Body de la requ√™te**

Dans le body de la requ√™te, tu dois inclure ton **refresh token** ainsi que le type de grant (`refresh_token`).

Voici un exemple de **Body** :

```json
{
  "refresh_token": "sdisnoaolyad",
  "grant_type": "refresh_token"
}
```

### 4. **Exemple de requ√™te dans Postman**

#### üìç **URL** :

```
https://<ton-projet>.supabase.co/auth/v1/token
```

#### üßæ **Headers** :

| Cl√©            | Valeur             |
| -------------- | ------------------ |
| `apikey`       | Ta cl√© `anon`      |
| `Content-Type` | `application/json` |

#### üß± **Body (raw > JSON)** :

```json
{
  "refresh_token": "sdisnoaolyad",
  "grant_type": "refresh_token"
}
```

---

### 5. **R√©ponse**

Si tout est correct, tu recevras un nouveau **access token** et un **refresh token** pour continuer √† faire des requ√™tes authentifi√©es.

### Exemple de r√©ponse :

```json
{
  "access_token": "nouveau_access_token",
  "token_type": "bearer",
  "expires_in": 3600,
  "expires_at": 1747056455,
  "refresh_token": "nouveau_refresh_token",
  "user": {
    "id": "d601a88a-8bbd-4ff0-8d2e-edf96c4f1897",
    "email": "niepemmanuella29@gmail.com"
  }
}
```

### Points √† noter :

* Le **refresh token** expire g√©n√©ralement aussi apr√®s un certain temps, donc garde-le en s√©curit√©.
* Si tu n'as pas de **refresh token** valide, tu devras demander √† l'utilisateur de se reconnecter.

---

Essaie cette requ√™te et fais-moi savoir si tu as besoin d'aide pour un autre aspect de l'authentification avec Supabase !




Tr√®s bonne question. Voici une explication claire :

---

### üë§ Diff√©rence entre `auth.users` et ta table `utilisateurs`

#### 1. `auth.users` (table g√©n√©r√©e par Supabase)

* Cr√©√©e automatiquement par Supabase.
* G√®re l‚Äô**authentification** : email, mot de passe, statut de v√©rification, etc.
* **Tu ne peux pas la modifier directement** (pas de colonnes personnalis√©es).
* Contient **l'identifiant unique (`id`)** de chaque utilisateur.
* Sert √† **se connecter / s‚Äôinscrire / se d√©connecter**.

#### 2. `utilisateurs` (ta propre table)

* Tu l‚Äôas cr√©√©e pour **stocker des infos personnalis√©es** :

  * Par exemple : nom, r√¥le, avatar, t√©l√©phone, pr√©f√©rences, etc.
* Elle est li√©e √† `auth.users` via la colonne `id` (cl√© √©trang√®re).
* Elle te permet d‚Äôavoir une vraie **fiche utilisateur**.
* Tu es libre de la modifier, de l‚Äôenrichir avec des relations, etc.

---

### ‚úÖ Pourquoi garder les deux ?

Parce que tu **dissocies la s√©curit√© (auth)** de la **gestion m√©tier (ton application)**.

| But                              | Table concern√©e         |
| -------------------------------- | ----------------------- |
| S'inscrire / Se connecter        | `auth.users`            |
| Afficher le nom de l‚Äôutilisateur | `utilisateurs.nom`      |
| Attribuer un r√¥le (admin, user)  | `utilisateurs.roles_id` |
| Modifier les donn√©es perso       | `utilisateurs`          |

---

### üîó Lien entre les deux tables

Lorsqu‚Äôun utilisateur s‚Äôinscrit :

1. Supabase cr√©e automatiquement un `auth.users` avec `email`, `password`, etc.
2. Tu fais une **insertion manuelle** dans ta table `utilisateurs` avec ce m√™me `id` pour y ajouter le `nom`, `role`, etc.

```js
await supabase
  .from('utilisateurs')
  .insert([{
    id: user.id, // identifiant Supabase auth
    nom: nom,    // le nom saisi
    email: email,
    roles_id: 2, // r√¥le par d√©faut
  }])
```

---

### üìå R√©sum√©

Ta table `utilisateurs` te sert √† :

* **√âtendre les donn√©es de l‚Äôutilisateur**.
* Organiser les r√¥les.
* G√©rer tout ce qui est propre √† **ton application**.

Souhaites-tu que je te montre un sch√©ma pour mieux visualiser cette relation ?
